defaults:
  deckName: Staging
  modelName: CodingProblems
  extraTags:
  - Code
  - Algorithms
  - Books
  - AFI-AlgorithmsForInterviews
  - AFI-10-Probability
  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"
    Back: "**To-do: Back.**"
  markdownTabLength: 4
notes:
- id: 1536203075526
  fields:
    Front: |
      ## 10.01: Offline sampling

      Let \\(A\\) be an array of \\(n\\) distinct elements. We want to compute a random subset of \\(k\\) elements.

      Design an algorithm that returns a subset of \\(k\\) elements; all subsets should be equally likely. Use as few calls to the random number generator as possible and use only \\(O(1)\\) additional storage. (You can return the result in the same array as input.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81.
- id: 1536203075588
  fields:
    Front: |
      ## 10.02: Reservoir sampling

      You are building a packet sniffer for your network that should be able to provide a uniform sample of packets for any network session. You always want to get \\(k\\) packets irrespective of the length (assuming each session is longer than \\(k\\)).

      Compute a random subset of size \\(k\\) from a set of unknown size which is presented as a sequence of elements.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.
- id: 1536203075638
  fields:
    Front: |
      ## 10.03: Online sampling

      Compute a random subset of size \\(k\\) from the integers in the interval \\([0, n - 1]\\). You should retum the result in an array of length \\(k\\). You may use only constant additional storage. All subsets should be equally likely and all permutations of the array should be equally likely.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.
- id: 1536203075704
  fields:
    Front: |
      ## 10.04: Random permutations --- 1

      Consider estimating the probability of winning a game of blackjack, assuming the cards were shuffled perfectly uniformly before dealing hands, and everyone is playing rationally. One way to do this would be to generate a few random permutations and compute the chances of winning in each case where you are dealt the given cards. Here it would be important that the process you use to generate a random permutation can generate any permutation with equal probability. This can be tricky.

      Does the following process yield a uniformly random permutation of \\(A\\)? "For \\(i\in\\{1,2,\ldots,n\\}\\), swap \\(A[i]\\) with a randomly chosen element of \\(A\\)." (The randomly chosen element could be \\(i\\) itself.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.
- id: 1536203075739
  fields:
    Front: |
      ## 10.05: Random permutations --- 2

      Design an algorithm that creates random permutations of \\(\\{1,2,\ldots,n\\}\\). Each permutation should be equally likely. You are given a random number generation function; use as few calls to it as possible.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.
- id: 1536203075776
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.06: Forming a triangle from random lengths

      Suppose you pick two numbers \\(u_1\\) and \\(u_2\\) uniformly randomly and independently in the interval \\([0,1]\\). These numbers divide the interval into three segments --- the first of length \\(\min(u_1, u_2)\\), the second of length \\(\max(u_1, u_2) - \min(u_1, u_2)\\), and the third of length \\(1-\max(u_1, u_2)\\). What is the probability that these three segments can be assembled into a triangle?

      Repeate the computation for the case where we pick \\(u_1\\) uniformly randomly from \\([0,1]\\) and then \\(u_2\\) uniformly randomly from \\([1-u_1, 1]\\).

      Can you determine which of the above two methods of generating \\(u_1\\) and \\(u_2\\) is more likely to produce a triangle without computing the exact probabilities?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82-3.
- id: 1536203075837
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.07: Balls and bins

      Suppose you have \\(n\\) web servers talking to \\(m\\) clients such that each client picks a server uniformly at random. If you do not end up wasting your server capacity, this is a nice way of pairing servers to clients since you do not need to centralize anything. But there is a chance that some of your servers are idle while clients are waiting to be served. How likely is it that there will be servers that are not doing anything? This problem is often modeled using balls and bins.

      If you throw \\(m\\) balls into \\(n\\) bins randomly, how would you compute the expected number of bins that do not have any balls?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.
- id: 1536203075888
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.08: Random permutations

      Suppose we create a random permutation of \\(\langle 1,2,\ldots,n \rangle\\), where each permutation has equal probability.

      What is the expected number of numbers that get mapped to themselves? What is the expected length of the largest increasing subsequence \\(\mu = \langle x_1,\ldots,x_l \rangle\\) in a randomly chosen permutation, where \\(x_l\\) is the first element of the permutation, and \\(x_k\\), \\(k > 1\\) is the first element that is larger than \\(x_{k_1}\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.
- id: 1536203075937
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.09: Uniform random number generation

      Sometimes you may not have the perfect random number generator you need. For example it would require a bit of thinking to devise an algorithm to pick one out of five friends who gets to be the designated driver by a coin flip such that the process is fair to everyone.

      How would you implement a random number generator that generates a random integer between \\(a\\) and \\(b\\), given a random number generator that produces either zero or one with equal probability? What would be the runtime of this algorithm assuming each call to the given random number generator takes \\(O(1)\\) time?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.
- id: 1536203075988
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.10: Nonuniform random number generation

      Suppose you want to write a load test for your server. You looked at the inter-arrival time of requests to your server over a period of one year, and from this data you have computed a histogram of the distribution of the inter-arrival time of requests. Now, in your load test you want to generate requests for your server such that the inter-arrival times come from the same distribution that you have seen in your data. How would you generate these inter-arrival times?

      Given the probability distribution of a discrete random variable \\(X\\) and a uniform \\([0,1]\\) random number generator, how would you generate instances of \\(X\\) that follow the given distribution?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83-4.
- id: 1536203076021
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.11: Expected number of dice rolls

      Bob repeatedly rolls an unbiased 6-sided dice. He stops when he has rolled all the six numbers on the dice. How many rolls will it take, on average, for Bob to see all the six numbers?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83-4.
- id: 1536203076103
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.12: Option pricing --- discrete case

      Consider an option to buy a stock \\(S\\) that currently trades at $100. The option is to buy the stock at $100 in 100 days.

      Suppose we know there are only two possible outcomes --- \\(S\\) will go to $120 or to $70.

      An arbitrage is a situation where you can start with a portfolio (\\(x_s\\) shares and \\(x_o\\) options) which has negative value (since you are allowed to short shares and sell options, both \\(x_s\\) and \\(x_o\\) may be negative) and regardless of the movement in the share price, the portfolio has positive value.

      For example, if the option is priced at $26, we can make money by buying one share for $100 and selling four options --- the initial outlay on the portfolio is \\(100 - 4 \times 26 = -4\\). If the stock goes up, our portfolio is worth \\(120 - 20 \times -4 = $80\\). If the stock goes down, the portfolio is worth \\($70\\). In either case, we make money with no initial investment, i.e., the option price allows for an arbitrage.

      For what option price(s) are there no opportunities for arbitrage?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 85.
- id: 1536203076143
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.13: Option pricing with interest

      Consider the same problem as Problem 10.12, with the existence of a third asset class, a bond. A $1 bond pays $1.02 in 100 days. You can borrow money at this rate or lend it at this rate.

      Show there is a unique arbitrage-free price for the option and compute this price.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 85.
- id: 1536203076165
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.14: Option pricing --- continuous case

      Suppose the price of Jingle stock 100 days in the future is a normal random variable with mean $300 and deviation $20. What would be the fair price of an option to buy a single share of Jingle at $300 in 100 days worth today? (Ignore the impact of interest rates.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 85.
- id: 1536203076204
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.15: Optimum bidding

      Consider an auction for an item in which the reserve price is set by the seller to be a random variable \\(X\\) that is uniformly distributed in the range \\([0, 400]\\). You can place a bid \\(B\\); if your bid is greater than or equal to the reserve price, you win the auction and have to pay \\(B\\). You can then sell the item for an 80% markup over what you paid for it.

      How much should you offer for the item?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 86.
- id: 1536203076255
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.16: Once or twice

      Suppose you are playing a game against a dealer. In order to play the game, you must pay $1. The dealer gets a random card from a full deck. You are shown a randomly selected card from another full deck. You have the choice of taking the card or exchanging it for another card which is also randomly selected from a full deck. You win the game if and only if the face value of your card is larger than that of dealer. If you win, you get \\(w\\) dollars. (The face value of an ace is 1; the face values of Jack, Queen, and King are 12, 13, and 14, respectively.)

      What would be the value of \\(w\\) such that it is a fair game, i.e., for a rational player the expected gain is zero.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 86.
- id: 1536203076304
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.17: Selecting a red card

      A deck of 52 playing cards is shuffled. The deck is placed face-down on a table. You are trying to select a red card. You can either examine or select the card that is currently at the top of the deck. If you choose to examine the top card, its value is revealed and it is set face-up. If you choose to select the top card, the game ends there --- you win if you select a red card and lose if the card is black. Once you examine a card, it cannot be selected. If you have turned over 51 cards, you must select the last card.

      What is the strategy that optimizes the likelihood of your selecting a red card?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 86.
- id: 1536203076355
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.18: Selecting the best secretary

      Suppose you are to choose a secretary from a pool of \\(n\\) secretaries who you interview in a random order. Given any two secretaries, you can tell who is better and the "is better" relationship is transitive. Once you interview a secretary, you can select her as your secretary and the selection process stops. Alternately, you can move on to the next one (but cannot go back to a previous secretary).

      Can you come up with a strategy that results in your selecting the best secretary with probability greater than \\(\frac{1}{n}\\)? What strategy maximizes the probability of selecting the best secretary?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 86-7.
- id: 1536203076404
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.19: Differentiating biases

      Two coins that are identical in appearance are placed in a black cloth bag. One is biased towards heads --- it comes up heads with probabi1ity 0.6. The other is biased towards tails --- it comes up heads with probability 0.4. For both coins, the outcomes of successive tosses are independent.

      You select a coin at random from the bag and toss it five times. It comes up heads three times. What is the probability that it was the coin that was biased towards tails? How many times do you need to toss the coin that is is biased towards tails before it comes up with a majority of tails with probability greater than \\(\frac{99}{100}\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 87.
- id: 1536203076470
  modelName: BasicMathJax
  fields:
    Front: |
      ## 10.20: The complexity of and-or formulas

      Suppose we want to evaluate an expression of the form \\((A \wedge B) \vee (C \wedge D)\\), where \\(\wedge\\) and \\(\vee\\) are Boolean AND and OR, respectively, and \\(A,B,C,D\\) are Boolean variables. It is natural to use _lazy evaluation_, i.e., when evaluating \\(A \wedge B\\), if we evaluate \\(A\\) first and it evaluates to false, then we skip evaluating \\(B\\).

      We now define a restricted set of expressions: \\(L_0\\) expressions are just Boolean variables; an \\(L_{k+1}\\) expression is of the form \\(((\phi_0 \wedge \phi_1)\vee(\psi_0 \wedge \psi_1))\\), where \\(\phi_0,\phi_1,\psi_0,\psi_1\\) are \\(L_k\\) expressions. All Boolean variables appearing in an \\(L_k\\) expression are distinct.

      We want to design an algorithm for evaluating an \\(L_k\\) expression, and want to minimize the number of variables that it reads. We do not care how much time the algorithm spends traversing the expression.

      Prove that a deterministic algorithm --- one in which the choice of the next variable to read is a deterministic function of the values read so far --- must read all \\(4^k\\) variables in the worst-case. Can you design a randomized algorithm that reads fewer variables on average, regardless of the values assigned to the variables?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 87.

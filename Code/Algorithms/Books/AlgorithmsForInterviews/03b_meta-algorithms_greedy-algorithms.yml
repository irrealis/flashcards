deckName: Staging
modelName: CodingProblems
tags:
- Code
- Algorithms
- Books
- AlgorithmsForInterviews
- 03-MetaAlgorithms
- 03b-GreedyAlgorithms

markdownTabLength: 4

notes:


- fields:
    Front: |
      ## 03.12: Scheduling tutors

      You are responsible for scheduling tutors for the day at a tutoring company. For each day, you have received a number of requests for tutors. Each request has a specified start time and each lesson is thirty minutes long. You have more tutors than requests. Each tutor can start work at any time. However tutors are constrained to work only one stretch which cannot be longer than two hours and each tutor can service only one request at a time.

      Given a set of requests for the day, design an efficient algorithm to compute the least number of tutors necessary to schedule all the requests for the day.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 36.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.13: Minimize waiting time

      A database has to respond to \\(n\\) simultaneous client SQL queries. The service time required for query \\(i\\) is \\(t_i\\) milliseconds and is known in advance. The lookups are processed sequentially but can be processed in any order. We wish to minimize the total waiting time \\(\sum_{i=1}^{n} T_i\\), where \\(T_i\\) is the time client \\(i\\) takes to return. For example, if the lookups are served in order of increasing \\(i\\), the the client making the \\(i\\)-th query has to wait \\(\sum_{j=1}^{i} t_j\\) milliseconds.

      Design an efficient algorithm for computing an optimimum order for processing the queries.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 36.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.14: Huffman coding
      Let's look at an application of Huffman coding. We want to compress a large piece of English text by building a variable length code book for each possible character. Consider the case where each character in the text is independent of all other characters (we can achieve better compression if we do not make this assumption but for this problem we will ignore this fact).

      One way of doing this kind of compression is to map each character to a bit string such that no bit string is a prefix of another (for example, 011 is a prefix of 0110 but not a prefix of 1100).

      We can simply encode the text by appending the bit strings for each character in the text. While decoding the string, we can keep reading the bits until we find a string that is in our code book and then repeat this process until the entire text is decoded.

      Since our objective is to compress the text, we would like to assign the shorter strings to more probable characters and the longer strings to less probable characters.

      Given a set of symbols with corresponding probabilities, find a prefix code assignment that minimizes the expected length of the encoded string.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 37.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.15: Efficient user interface

      A user interface (UI) designer is trying to design a menu system that customers use to trigger certain tasks. He wants to minimize the average amount of time it takes for a customer to perform tasks.

      If a menu item is at the \\(i\\)-th position, it takes \\(i\\) units of time for the user to reach there (linear scan) and it takes \\(c\\) units of time to click on it. Each menu item can have multiple levels of sub-menus and a sub-menu can be reached by clicking on its parent menu item.

      The designer is provided with a user study that details how often users want tasks to be triggered. (In a real application, we would also worry about grouping related items in the same sub-menu as well but for this problem we will ignore grouping requirements.)

      How should the menu system be designed so as to minimize the average UI interaction time if \\(c = 1\\)? How would you do it if \\(c > 1\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 37-8.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**

deckName: Staging
modelName: CodingProblems
tags:
- Code
- Algorithms
- Books
- AlgorithmsForInterviews
- 03-MetaAlgorithms
- 03b-GreedyAlgorithms

markdownTabLength: 4

notes:


- fields:
    Front: |
      ## 03.12: Scheduling tutors

      You are responsible for scheduling tutors for the day at a tutoring company. For each day, you have received a number of requests for tutors. Each request has a specified start time and each lesson is thirty minutes long. You have more tutors than requests. Each tutor can start work at any time. However tutors are constrained to work only one stretch which cannot be longer than two hours and each tutor can service only one request at a time.

      Given a set of requests for the day, design an efficient algorithm to compute the least number of tutors necessary to schedule all the requests for the day.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 36.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.13: Minimize waiting time

      A database has to respond to \\(n\\) simultaneous client SQL queries. The service time required for query \\(i\\) is \\(t_i\\) milliseconds and is known in advance. The lookups are processed sequentially but can be processed in any order. We wish to minimize the total waiting time \\(\sum_{i=1}^{n} T_i\\), where \\(T_i\\) is the time client \\(i\\) takes to return. For example, if the lookups are served in order of increasing \\(i\\), the the client making the \\(i\\)-th query has to wait \\(\sum_{j=1}^{i} t_j\\) milliseconds.

      Design an efficient algorithm for computing an optimimum order for processing the queries.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 36.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.14: Huffman coding
      Let's look at an application of Huffman coding. We want to compress a large piece of English text by building a variable length code book for each possible character. Consider the case where each character in the text is independent of all other characters (we can achieve better compression if we do not make this assumption but for this problem we will ignore this fact).

      One way of doing this kind of compression is to map each character to a bit string such that no bit string is a prefix of another (for example, 011 is a prefix of 0110 but not a prefix of 1100).

      We can simply encode the text by appending the bit strings for each character in the text. While decoding the string, we can keep reading the bits until we find a string that is in our code book and then repeat this process until the entire text is decoded.

      Since our objective is to compress the text, we would like to assign the shorter strings to more probable characters and the longer strings to less probable characters.

      Given a set of symbols with corresponding probabilities, find a prefix code assignment that minimizes the expected length of the encoded string.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 37.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.15: Efficient user interface

      A user interface (UI) designer is trying to design a menu system that customers use to trigger certain tasks. He wants to minimize the average amount of time it takes for a customer to perform tasks.

      If a menu item is at the \\(i\\)-th position, it takes \\(i\\) units of time for the user to reach there (linear scan) and it takes \\(c\\) units of time to click on it. Each menu item can have multiple levels of sub-menus and a sub-menu can be reached by clicking on its parent menu item.

      The designer is provided with a user study that details how often users want tasks to be triggered. (In a real application, we would also worry about grouping related items in the same sub-menu as well but for this problem we will ignore grouping requirements.)

      How should the menu system be designed so as to minimize the average UI interaction time if \\(c = 1\\)? How would you do it if \\(c > 1\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 37-8.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.16: Packing USPS Priority Mail

      The United States Postal Service makes fixed-size mail shipping boxes --- you pay a fixed price for a given box and can ship anything you want that fits in the box. Suppose you have a set of \\(n\\)items that you need to ship and have a large supply of the \\(4 \times 12 \times 8\\) inch priority mail shipping boxes. Each item will fit in such a box but all of them combined may take multiple boxes. Naturally, you want to minimize the number of boxes you use.

      The first-fit heuristic is a greedy algorithm for this problem --- it processes the items in the sequence in which they are first given and places them in the first box in which they fit, scanning through boxes in increasing order. First-fit is not optimum but it never takes more than twice as many boxes as the minimum possible.

      Implement first-fit to run in \\(O(n \log n)\\) time.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 38.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.17: Points covering intervals

      Consider an engineer responsible for a number of tasks on the factory floor. Each task starts at a fixed time and ends at a fixed time. The engineer wants to visit the floor to check on the tasks. Your task is to help him minimize the number of visits he makes. In each visit, he can check on all the tasks taking place at the time of the visit. A visit takes place at a fixed time and he can only check on tasks taking place at exactly that time.

      More formally, model the tasks as \\(n\\) closed intervals on the real line \\([a_i,b_i]\\), \\(i = 1, \ldots, n\\). A set \\(S\\) of visit times "covers" the tasks if \\([a_i,b_i] \cap S \ne \emptyset\\), for \\(i = 1, \ldots, n\\).

      Design an efficient algorithm for finding a minimum cardinality set of visit times that covers all the tasks.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 38.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.18: Rays covering arcs

      Let's say you are responsible for the security of a castle. The castle has a circular perimeter. There are \\(n\\) robots that patrol the perimiter -- each robot is responsible for a closed connected subset of the perimeter, i.e., an arc. (The arcs for different robots may overlap.) You want to monitor the robots by installing cameras at the center of the castle that look out to the perimeter. Each camera can look along a ray. To save cost, you would like to minimize the number of cameras.

      More formally, let \\([\theta_i, \phi_i]\\), \\(i=1,\ldots,n\\) be \\(n\\) arcs, where the \\(i\\)-th arc is the set of points on the perimiter of the unit circle that subtend an angle in the interval \\([\theta_i, \phi_i]\\) at the center.

      A ray is a set of points that all subtend the same angle to the origin --- we identify a ray by the angle it makes relative to the \\(X\\)-axis. A set \\(R\\) of rays "covers" the arcs if \\([\theta_i, \phi_i] \cap R \ne \emptyset\\), for \\(i = 1, \ldots, n\\).

      Design an efficient algorithm for finding a minimum-cardinatlity covering of the set of rays.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 39.

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**


- fields:
    Front: |
      ## 03.19: \\(k\\)-clustering

      A \\(k\\)-clustering of a set \\(O\\) is a collection \\({O_1, O_2, \ldots, O_k}\\) of nonemtpy subsets ("clusters") of \\(O\\) which has the following properties: \\(O = \bigcup_{i=1}^k O_i\\) and \\(O_i \cap O_j \ne \emptyset \Rightarrow i = j\\), for \\(i=1,\ldots,n\\).

      Let \\(d\\) be a function (the "distance") from \\(O \times O\\) to \\(\mathbb{Z}^+\\), where \\(\mathbb{Z}^+\\) is the set of nonnegative integers.

      The need to compute a \\(k\\)-clustering, in which elements that are far apart are in different clusters, comes up in many contexts --- assigning cities to salesmen, selecting which racks to place magazines in at a bookstore, etc.

      Define the _separation_ \\(s_C\\) of a \\(k\\)-clustering \\(C\\) to be the distance between the two objects in different clusters which are closest, i.e., \\(s_C = \min\\{d(p,q)| p \in O_i, q \in O_j, i\ne j\\}\\). Intuitively, the separation is a measure of how good a job the clustering does of keeping things which are far apart in different clusters.

      There is a natural greedy algorithm to compute the clustering: start with \\(|O|\\) clusters, i.e., one cluster per element of \\(O\\). Look for the pair of elements in different clusters which are closest and merge their two clusters; repeat this merge a total of \\(n-k\\) times to obtain \\(k\\) clusters.

      This algorithm can be made to run very efficiently using a min-heap to store the distances being considered and a union-find data-structure to represent and merge the subsets.

      Prove that the resulting cluster has the maximum separation of all possible \\(k\\)-clusterings.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 39-40.

    Thoughts: |
      The book observes:

      "Note that the algorithm above is very simplistic: it does not attempt to balance cluster sizes, look at distances outside of pairwise-closest ones, exploit any structure in the distance function (e.g., the triangle inequality), etc. In a realistic setting, these and many more considerations are taken into account."

    Python: |
      **To-do: Python.**

    Java: |
      **To-do: Java.**

    C++: |
      **To-do: C++.**

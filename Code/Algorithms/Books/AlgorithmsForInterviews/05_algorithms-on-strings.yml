defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 05-AlgorithmsOnStrings

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"

  markdownTabLength: 4


notes:

- fields:
    Front: |
      ## 05.01: Find all occurrences of a substring

      A good string-search algorithm is fundamental to the performance of many applications, and there are several elegant algorithms proposed for it, each with its own tradeoffs. As a result, there is no one perfect answer to it. If someone asks you this question in an interview, the best way to approach this problem would be to work through one good algorithm in detail and discuss the breadth of other algorithms for solving this problem.

      Given two strings \\(s\\) (search string) and \\(T\\) (text), find all occurrences of \\(s\\) in \\(T\\).

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 52.


- fields:
    Front: |
      ## 05.02: String matching with unique characters

      Suppose we are looking for a search string \\(S\\) in another string \\(T\\). A naïve algorithm would try to match all the characters in \\(S\\) to characters in \\(T\\) at each offset. The worst-case complexity of the naïve algorithm is \\(\Theta(|S| \cdot |T|)\\) --- consider the case where \\(S\\) is \\(2n\\) zeros, and \\(T\\) is \\(n-1\\) zeros followed by a one.

      The worst-case behavior for the naïve algorithm requires many duplicated characters. Suppose no character occurs more than once in the search string. Devise an algorithm to efficiently search for all occurrences of the search string in the text string.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 53.


- fields:
    Front: |
      ## 05.03: Rotate a string

      Let \\(A\\) be a string of length \\(n\\). If we have enough memory to make a copy of \\(A\\), rotating \\(A\\) by \\(i\\) positions is trivial; we just compute \\(B[j] = A[(i + j) \mod n]\\). If we are given only a constant amount of additional memory \\(c\\), we can rotate the string by \\(c\\) positions a total of \\(k = \lceil\frac{n}{c}\rceil\\) times, but this increases the time complexity to \\(\Theta(n \cdot k)\\).

      Design a \\(\Theta(n)\\) algorithm for rotating a string of \\(n\\) letters to the left by \\(i\\) positions. You are allowed only a constant number of bytes of additional storage.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 53.


- fields:
    Front: |
      ## 05.04: Test rotation

      In Problem 5.3, we faced the problem of efficiently implementing rotation with a limited amount of memory. We now consider the problem of testing if one string is a rotation of another.

      Develop a linear-time algorithm for checking if a string \\(S\\) is a cyclic rotation of another string \\(R\\). (For example, _arc_ is a cyclic rotation of _car_.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 53.


- fields:
    Front: |
      ## 05.05: Normalize URLs

      A URL is described canonically in the following way:

      ```
      <protocol>://<hostname>:[<port>]/<path>
      ```

      There may be a number of different URL strings that are semantically equivalent. For example, `cnn.com` is equivalent to `http://cnn.com`, and `http://www.ece.utexas.edu/index.html` to `http://www.ece.utexas.edu`. Applications such as web search that deal with URLs need to perform transformations to a URL string to normalize it. The transformations may vary from application to application.

      Implement a function which takes a URL as input and performs the following transformations on it:

      1. make hostname and protocol lowercase,
      2. if it ends in "`index.html`" or "`default.html`", remove the filename,
      3. if protocol field is missing, add "`http://`" at the beginning, and
      4. replace consecutive '`/`' characters by a single '`/`' in the "path" segment of the URL.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 53-4.


- fields:
    Front: |
      ## 05.06: Longest palindrome subsequence

      A palindrome is a string which is equal to itself when reversed. For example, the human Y-chromosome contains a gene with the amino acid sequence \\(\langle C,A,C,A,A,T,T,C,C,C,A,T,G,G,G,T,T,G,T,G,G,A,G \rangle\\), which includes the palindromic subsequences \\(\langle T,G,G,G,T \rangle\\) and \\(\langle T,G,T \rangle\\). Palindromic subsequences in DNA are significant because they influence the ability of the strand to loop back on itself.

      Devise an efficient algorithm that takes a DNA sequence \\(D[1, \ldots, n]\\) and returns the length of the longest palindromic subsequence.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 54.


- fields:
    Front: |
      ## 05.07: Pretty printing

      Consider the problem of arranging a piece of text in a fixed width font (i.e., each character has the same width) in a rectangular space. Breaking words across line boundaries is visually displeasing. If we avoid word breaking, then we may frequently be left with many spaces at the end of lines (since the next word will not fit in the remaining space). However, if we are clever about where we break the lines, we can reduce this effect.

      Given a long piece of text, decompose it into lines such that no word spans across two lines, and the total wasted space at the end of each line is minimized.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 54.


- fields:
    Front: |
      ## 05.08: Edit distances

      Spell checkers make suggestions for misspelled words. Given a misspelled string \\(s\\), a spell checker should return words in the dictionary which are close to \\(s\\).

      One definition of closeness is the number of "edits" it would take to transform the misspelled word into a correct word, where a single edit is the deletion or insertion of a single character.

      Given two strings \\(A\\) and \\(B\\), compute the minimum number of edits needed to transform \\(A\\) into \\(B\\).

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 54.


- fields:
    Front: |
      ## 05.09: Regular expression matching

      A regular expression is a sequence of characters that defines a set of matching strings. For this problemr we define a simple subset of a full regular expression language:

      - Alphabetical and numerical characters match themselves. For example, "`aW9`" will match that string of 3 letters wherever it appears.
      - The metacharacters '`^`'. and '`$`' stand for the beginning and end of the string. For example , "`^aW9`" matches "`aw9`" only at the start of a string, "`aW9$`" matches "`aW9'" only at the end of a string, and "`^aW9$`" matches a string only if it is exactly equal to "`aW9`".

      - The metacharacter '`.`' matches any single character. For example, "`a.9`" matches "`a89`" and "`xyaW9123`", but not "`aw89`".

      - The metacharacter '`*`' specifies a repetition of the single previous period or a literal character. For example, "`a.*9`" matches "`aw89`".

      By definition, regular expression `r` matches string `s` if `s` contains a substring starting at any position matching `r`. For example, "`aW9`" and "`a.9`" match string "`xyaW9123`", but "`^aW9`" does not.

      Design an algorithm that takes strings `s` and `r` and returns if `r` matches `s`. (Assume `r` is a well-formed regular expression.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 55.

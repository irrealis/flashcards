defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 07-ParallelComputing

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"
    Back: "**To-do: Back.**"

  markdownTabLength: 4


notes:

- fields:
    Front: |
      ## 07.01: Servlet with caching

      Design a servlet which implements an online spell correction suggester. Specifically, it takes as input a string \\(s\\) and computes an array of entries in its dictionary which are closest to the string using the edit distance specified in Problem 5.8. Since computing the edit distances from \\(s\\) to each entry in the dictionary is time-consuming, you should implementa a caching strategy. Specifically, cache the most recently computed result.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 63.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 07.02: Thread pools

      The following class, `SimpleWebServer`, implements part of a simple HTTP server:

      ```{java }
      public class SimpleWebServer {
        final static int PORT = 8080;
        public static void main(String [] args)
          throws IOException
        {
          ServerSocket serversock = new ServerSocket(PORT);
          for (;;) {
            Socket sock = serversock.accept();
            ProcessReq(sock);
          }
        }
      }
      ```

      Suppose you find that `SimpleWebServer` has poor performance because `ProcessReq` frequently blocks on IO. What steps could you take to improve `SimpleWebServer`'s performance?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 64.


- fields:
    Front: |
      ## 07.03: Asynchronous callbacks

      It is common in a distributed computing environment for the responses to not return in the same order as the requests were made. One way to handle this is through an "asynchronous callback" --- a method to be invoked on response.

      Implement a `Requestor` class. The class has to implement a `Dispatch` method which takes a `Requestor` object. The `Requestor` obect includes a `request` string, a `ProcessResponse (string response)` method, and an `Execute` method that takes a string and returns a string.

      `Dispatch` is to create a new thread which invokes `Execute` on `request`. When `Execute` returns, `Dispatch` invokes the `ProcessResponse` method on the response.

      The `Execute` method may take an indeterminate amount of time to return; it may never return. You need to have a time-out mechanism for this: assume the `Requestor` objects have an `Error` method that you can invoke.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 64.

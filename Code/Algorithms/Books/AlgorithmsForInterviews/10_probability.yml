defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 10-Probabilit0y

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"
    Back: "**To-do: Back.**"

  markdownTabLength: 4


notes:

- fields:
    Front: |
      ## 10.01: Offline sampling

      Let \\(A\\) be an array of \\(n\\) distinct elements. We want to compute a random subset of \\(k\\) elements.

      Design an algorithm that returns a subset of \\(k\\) elements; all subsets should be equally likely. Use as few calls to the random number generator as possible and use only \\(O(1)\\) additional storage. (You can return the result in the same array as input.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81.


- fields:
    Front: |
      ## 10.02: Reservoir sampling

      You are building a packet sniffer for your network that should be able to provide a uniform sample of packets for any network session. You always want to get \\(k\\) packets irrespective of the length (assuming each session is longer than \\(k\\)).

      Compute a random subset of size \\(k\\) from a set of unknown size which is presented as a sequence of elements.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.


- fields:
    Front: |
      ## 10.03: Online sampling

      Compute a random subset of size \\(k\\) from the integers in the interval \\([0, n - 1]\\). You should retum the result in an array of length \\(k\\). You may use only constant additional storage. All subsets should be equally likely and all permutations of the array should be equally likely.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.


- fields:
    Front: |
      ## 10.04: Random permutations --- 1

      Consider estimating the probability of winning a game of blackjack, assuming the cards were shuffled perfectly uniformly before dealing hands, and everyone is playing rationally. One way to do this would be to generate a few random permutations and compute the chances of winning in each case where you are dealt the given cards. Here it would be important that the process you use to generate a random permutation can generate any permutation with equal probability. This can be tricky.

      Does the following process yield a uniformly random permutation of \\(A\\)? "For \\(i\in\\{1,2,\ldots,n\\}\\), swap \\(A[i]\\) with a randomly chosen element of \\(A\\)." (The randomly chosen element could be \\(i\\) itself.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.


- fields:
    Front: |
      ## 10.05: Random permutations --- 2

      Design an algorithm that creates random permutations of \\(\\{1,2,\ldots,n\\}\\). Each permutation should be equally likely. You are given a random number generation function; use as few calls to it as possible.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.06: Forming a triangle from random lengths

      Suppose you pick two numbers \\(u_1\\) and \\(u_2\\) uniformly randomly and independently in the interval \\([0,1]\\). These numbers divide the interval into three segments --- the first of length \\(\min(u_1, u_2)\\), the second of length \\(\max(u_1, u_2) - \min(u_1, u_2)\\), and the third of length \\(1-\max(u_1, u_2)\\). What is the probability that these three segments can be assembled into a triangle?

      Repeate the computation for the case where we pick \\(u_1\\) uniformly randomly from \\([0,1]\\) and then \\(u_2\\) uniformly randomly from \\([1-u_1, 1]\\).

      Can you determine which of the above two methods of generating \\(u_1\\) and \\(u_2\\) is more likely to produce a triangle without computing the exact probabilities?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82-3.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.07: Balls and bins

      Suppose you have \\(n\\) web servers talking to \\(m\\) clients such that each client picks a server uniformly at random. If you do not end up wasting your server capacity, this is a nice way of pairing servers to clients since you do not need to centralize anything. But there is a chance that some of your servers are idle while clients are waiting to be served. How likely is it that there will be servers that are not doing anything? This problem is often modeled using balls and bins.

      If you throw \\(m\\) balls into \\(n\\) bins randomly, how would you compute the expected number of bins that do not have any balls?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.08: Random permutations

      Suppose we create a random permutation of \\(\langle 1,2,\ldots,n \rangle\\), where each permutation has equal probability.

      What is the expected number of numbers that get mapped to themselves? What is the expected length of the largest increasing subsequence \\(\mu = \langle x_1,\ldots,x_l \rangle\\) in a randomly chosen permutation, where \\(x_l\\) is the first element of the permutation, and \\(x_k\\), \\(k > 1\\) is the first element that is larger than \\(x_{k_1}\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.09: Uniform random number generation

      Sometimes you may not have the perfect random number generator you need. For example it would require a bit of thinking to devise an algorithm to pick one out of five friends who gets to be the designated driver by a coin flip such that the process is fair to everyone.

      How would you implement a random number generator that generates a random integer between \\(a\\) and \\(b\\), given a random number generator that produces either zero or one with equal probability? What would be the runtime of this algorithm assuming each call to the given random number generator takes \\(O(1)\\) time?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.10: Nonuniform random number generation

      Suppose you want to write a load test for your server. You looked at the inter-arrival time of requests to your server over a period of one year, and from this data you have computed a histogram of the distribution of the inter-arrival time of requests. Now, in your load test you want to generate requests for your server such that the inter-arrival times come from the same distribution that you have seen in your data. How would you generate these inter-arrival times?

      Given the probability distribution of a discrete random variable \\(X\\) and a uniform \\([0,1]\\) random number generator, how would you generate instances of \\(X\\) that follow the given distribution?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83-4.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.11: Expected number of dice rolls

      Bob repeatedly rolls an unbiased 6-sided dice. He stops when he has rolled all the six numbers on the dice. How many rolls will it take, on average, for Bob to see all the six numbers?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83-4.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.12: Option pricing --- discrete case

      Consider an option to buy a stock \\(S\\) that currently trades at $100. The option is to buy the stock at $100 in 100 days.

      Suppose we know there are only two possible outcomes --- \\(S\\) will go to $120 or to $70.

      An arbitrage is a situation where you can start with a portfolio (\\(x_s\\) shares and \\(x_o\\) options) which has negative value (since you are allowed to short shares and sell options, both \\(x_s\\) and \\(x_o\\) may be negative) and regardless of the movement in the share price, the portfolio has positive value.

      For example, if the option is priced at $26, we can make money by buying one share for $100 and selling four options --- the initial outlay on the portfolio is \\(100 - 4 \times 26 = -4\\). If the stock goes up, our portfolio is worth \\(120 - 20 \times -4 = $80\\). If the stock goes down, the portfolio is worth \\($70\\). In either case, we make money with no initial investment, i.e., the option price allows for an arbitrage.

      For what option price(s) are there no opportunities for arbitrage?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 85.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.13: Option pricing with interest

      Consider the same problem as Problem 10.12, with the existence of a third asset class, a bond. A $1 bond pays $1.02 in 100 days. You can borrow money at this rate or lend it at this rate.

      Show there is a unique arbitrage-free price for the option and compute this price.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 85.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.14: Option pricing --- continuous case

      Suppose the price of Jingle stock 100 days in the future is a normal random variable with mean $300 and deviation $20. What would be the fair price of an option to buy a single share of Jingle at $300 in 100 days worth today? (Ignore the impact of interest rates.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 85.

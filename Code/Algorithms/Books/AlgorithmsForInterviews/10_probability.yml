defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 10-Probabilit0y

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"
    Back: "**To-do: Back.**"

  markdownTabLength: 4


notes:

- fields:
    Front: |
      ## 10.01: Offline sampling

      Let \\(A\\) be an array of \\(n\\) distinct elements. We want to compute a random subset of \\(k\\) elements.

      Design an algorithm that returns a subset of \\(k\\) elements; all subsets should be equally likely. Use as few calls to the random number generator as possible and use only \\(O(1)\\) additional storage. (You can return the result in the same array as input.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81.


- fields:
    Front: |
      ## 10.02: Reservoir sampling

      You are building a packet sniffer for your network that should be able to provide a uniform sample of packets for any network session. You always want to get \\(k\\) packets irrespective of the length (assuming each session is longer than \\(k\\)).

      Compute a random subset of size \\(k\\) from a set of unknown size which is presented as a sequence of elements.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.


- fields:
    Front: |
      ## 10.03: Online sampling

      Compute a random subset of size \\(k\\) from the integers in the interval \\([0, n - 1]\\). You should retum the result in an array of length \\(k\\). You may use only constant additional storage. All subsets should be equally likely and all permutations of the array should be equally likely.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.


- fields:
    Front: |
      ## 10.04: Random permutations --- 1

      Consider estimating the probability of winning a game of blackjack, assuming the cards were shuffled perfectly uniformly before dealing hands, and everyone is playing rationally. One way to do this would be to generate a few random permutations and compute the chances of winning in each case where you are dealt the given cards. Here it would be important that the process you use to generate a random permutation can generate any permutation with equal probability. This can be tricky.

      Does the following process yield a uniformly random permutation of \\(A\\)? "For \\(i\in\\{1,2,\ldots,n\\}\\), swap \\(A[i]\\) with a randomly chosen element of \\(A\\)." (The randomly chosen element could be \\(i\\) itself.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.


- fields:
    Front: |
      ## 10.05: Random permutations --- 2

      Design an algorithm that creates random permutations of \\(\\{1,2,\ldots,n\\}\\). Each permutation should be equally likely. You are given a random number generation function; use as few calls to it as possible.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.06: Forming a triangle from random lengths

      Suppose you pick two numbers \\(u_1\\) and \\(u_2\\) uniformly randomly and independently in the interval \\([0,1]\\). These numbers divide the interval into three segments --- the first of length \\(\min(u_1, u_2)\\), the second of length \\(\max(u_1, u_2) - \min(u_1, u_2)\\), and the third of length \\(1-\max(u_1, u_2)\\). What is the probability that these three segments can be assembled into a triangle?

      Repeate the computation for the case where we pick \\(u_1\\) uniformly randomly from \\([0,1]\\) and then \\(u_2\\) uniformly randomly from \\([1-u_1, 1]\\).

      Can you determine which of the above two methods of generating \\(u_1\\) and \\(u_2\\) is more likely to produce a triangle without computing the exact probabilities?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82-3.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.07: Balls and bins

      Suppose you have \\(n\\) web servers talking to \\(m\\) clients such that each client picks a server uniformly at random. If you do not end up wasting your server capacity, this is a nice way of pairing servers to clients since you do not need to centralize anything. But there is a chance that some of your servers are idle while clients are waiting to be served. How likely is it that there will be servers that are not doing anything? This problem is often modeled using balls and bins.

      If you throw \\(m\\) balls into \\(n\\) bins randomly, how would you compute the expected number of bins that do not have any balls?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.


- modelName: BasicMathJax
  fields:
    Front: |
      ## 10.08: Random permutations

      Suppose we create a random permutation of \\(\langle 1,2,\ldots,n \rangle\\), where each permutation has equal probability.

      What is the expected number of numbers that get mapped to themselves? What is the expected length of the largest increasing subsequence \\(\mu = \langle x_1,\ldots,x_l \rangle\\) in a randomly chosen permutation, where \\(x_l\\) is the first element of the permutation, and \\(x_k\\), \\(k > 1\\) is the first element that is larger than \\(x_{k_1}\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 83.

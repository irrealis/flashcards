defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 10-Probabilit0y

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"
    Back: "**To-do: Back.**"

  markdownTabLength: 4


notes:

- fields:
    Front: |
      ## 10.01: Offline sampling

      Let \\(A\\) be an array of \\(n\\) distinct elements. We want to compute a random subset of \\(k\\) elements.

      Design an algorithm that returns a subset of \\(k\\) elements; all subsets should be equally likely. Use as few calls to the random number generator as possible and use only \\(O(1)\\) additional storage. (You can return the result in the same array as input.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81.


- fields:
    Front: |
      ## 10.02: Reservoir sampling

      You are building a packet sniffer for your network that should be able to provide a uniform sample of packets for any network session. You always want to get \\(k\\) packets irrespective of the length (assuming each session is longer than \\(k\\)).

      Compute a random subset of size \\(k\\) from a set of unknown size which is presented as a sequence of elements.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.


- fields:
    Front: |
      ## 10.03: Online sampling

      Compute a random subset of size \\(k\\) from the integers in the interval \\([0, n - 1]\\). You should retum the result in an array of length \\(k\\). You may use only constant additional storage. All subsets should be equally likely and all permutations of the array should be equally likely.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 81-2.


- fields:
    Front: |
      ## 10.04: Random permutations --- 1

      Consider estimating the probability of winning a game of blackjack, assuming the cards were shuffled perfectly uniformly before dealing hands, and everyone is playing rationally. One way to do this would be to generate a few random permutations and compute the chances of winning in each case where you are dealt the given cards. Here it would be important that the process you use to generate a random permutation can generate any permutation with equal probability. This can be tricky.

      Does the following process yield a uniformly random permutation of \\(A\\)? "For \\(i\in\\{1,2,\ldots,n\\}\\), swap \\(A[i]\\) with a randomly chosen element of \\(A\\)." (The randomly chosen element could be \\(i\\) itself.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 82.

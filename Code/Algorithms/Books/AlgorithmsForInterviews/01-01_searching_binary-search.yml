deckName: Staging
modelName: CodingProblems
tags:
- Code
- Algorithms
- Books
- AlgorithmsForInterviews
- 01-Searching
- 01a-BinarySearch

markdownTabLength: 4

notes:


- Front: |
    ## 01.01: Computing square roots

    Square root computations can be implemented using sophisticated numeric techniques involving iterative methods and logarithms. However if you were asked to implement a square root function, you would not be expected to know these techniques.

    Implement a fast integer square root function that takes in a 32-bit unsigned integer and returns another 32-bit unsigned integer that is the floor of the square root of the input.

    --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); pp 14-6.

  Python: |
    - Clarify: for 9 through 15, this would return 3.
    - Wrinkles:
        - Negative inputs; for now assume nonnegative.
        - Non-integer inputs; for now assume integer.
        - Inputs \\(\ge 2^{32}\\); for now assume \\(< 2^{32}\\).
    - Core:
        - Binary search of natural numbers returning largest integer whose square is \\(\le\\) input.
    - Solution code:
    ```{python }
        def sqrt_floor(x):
          lower = 0
          upper = x+1
          last_guess = -1
          while lower < upper:
            mid = lower + (upper - lower)//2
            mid_sq = mid**2
            if x == mid_sq:
              return mid
            elif x < mid_sq:
              upper = mid
              last_guess = upper - 1
            else:
              lower = mid+1
              last_guess = lower - 1
          return last_guess

        for x in range(10001):
          expected = int(x**0.5)
          actual = sqrt_floor(x)
          assert actual == expected
    ```

  Java: |
    **To-do: Java.**

  C++: |
    **To-do: C++.**


- Front: |
    ## 01.02: Search a sorted array for \\(k\\)

    Write a method that takes a sorted array \\(A\\) of integers and a key \\(k\\) and returns the index of first occurrence of \\(k\\) in \\(A\\). Return \\(-1\\) if \\(k\\) does not appear in \\(A\\). Write tests to verify your code.

    --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 16.

  Python: |
    **To-do: Python.**

  Java: |
    **To-do: Java.**

  C++: |
    **To-do: C++.**


- Front: |
    ## 01.03: Search a sorted array for the first element larger than \\(k\\)

    Design an efficient algorithm that finds the index of the first occurrence of an element larger than a specified key \\(k\\); return -1 if every element is less than or equal to \\(k\\).

    --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 16.

  Python: |
    **To-do: Python.**

  Java: |
    **To-do: Java.**

  C++: |
    **To-do: C++.**


- Front: |
    ## 01.04: Search a sorted array for \\(A[i]=i\\)

    Suppose that in addition to being sorted, the entries of \\(A\)) are distinct integers. Design an efficient algorithm for finding an index \((i\)) such that \\(A[i]=i\\) or indicating that no such index exists.

    --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 16.

  Python: |
    **To-do: Python.**

  Java: |
    **To-do: Java.**

  C++: |
    **To-do: C++.**



- Front: |
    ## 01.05: Search a sorted array of unknown length

    Suppose you do not know the length of \\(A\\) in advance; accessing \\(A[i]\\) for \\(i\\) beyond the end of the array throws an exception.

    Find the index of the first occurrence in \\(A\\) of a specified key \\(k\\); return -1 if \\(k\\) does not appear in \\(A\\).

    &mdash; Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 16.

  Python: |
    **To-do: Python.**

  Java: |
    **To-do: Java.**

  C++: |
    **To-do: C++.**

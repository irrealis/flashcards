defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 11-Programming
  - 11c-LinkedLists

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"
    Back: "**To-do: Back.**"

  markdownTabLength: 4


notes:


- fields:
    Front: |
      ## 11.07: Reversing a singly linked list

      Suppose you were given a singly linked list of integers sorted in ascending order and you need to return a list with the elements sorted in descending order. Suppose memory is scarce but you can reuse nodes in the original list.

      Give a linear-time nonrecursive procedure that reverses a singly linked list. The procedure should use no more than constant storage beyond that needed for the list itself.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 91.


- fields:
    Front: |
      ## 11.08: Checking for cyclicity

      While a linked list is supposed to be a sequence of nodes ending in a null, it is possible to introduce a cycle in a linked list by making the next field of an element reference to one of the earlier nodes.

      Given a reference to the head of a singly linked list, how would you determine whether this list ends in a null or reaches a cycle of nodes? (You do not know the length of the list.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 91.

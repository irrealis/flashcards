defaults:
  deckName: Staging
  modelName: CodingProblems
  tags:
  - Code
  - Algorithms
  - Books
  - AlgorithmsForInterviews
  - 06-Intractability

  fields:
    Python: "**To-do: Python.**"
    Java: "**To-do: Java.**"
    C++: "**To-do: C++.**"

  markdownTabLength: 4


notes:

- fields:
    Front: |
      ## 06.01: 0-1 knapsack

      A thief has to choose from \\(n\\) items. Item \\(i\\) can be sold for \\(v_i\\) dollars and weighs \\(w_i\\) pounds (\\(v_i\\) and \\(w_i\\) are integers). The thief wants to take as valuable a load as possible but he can carry at most \\(W\\) pounds in his knapsack.

      Design an algorithm that will select a subset of items that has maximum value and weighs at most \\(W\\) pounds. (This problem is called the 0-1 knapsack problem because each item must either be taken or left behind --- the thief cannot take a fractional amount of an item or take an item more than once.)

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 57-8.


- fields:
    Front: |
      ## 06.02: Traveling salesman in the plane

      Suppose a salesman needs to visit a set of cities \\(A_0, A_1, \ldots, A_{n-1}\\). For any ordered pair of cities \\((A_i, A_j)\\), there is a cost \\(c(A_i, A_j)\\) of traveling from the first to the second city. We need to design a low-cost tour for the salesman.

      A _tour_ is a sequence of cities \\(\langle B_0, B_1, \ldots, B_{n-1}, B_0 \rangle\\). It can start at any city, and the salesman can visit the cities in any order. All the cities must appear in the subsequence \\(\langle B_0, B_1, \ldots, B_{n-1} \rangle\\). (Note that this implies that all the cities in this subsequence are distinct.)

      The cost of the tour is the sum of the costs of the \\(n\\) successive pairs \\((B_i, B_{i+1 \mod n})\\), \\(i=0\\) to \\(n-1\\).

      Determining the minimum cost tour is a classic NP-complete problem and the problem remains hard even if we just ask for a tour whose cost is within a given multiple \\(M\\) of the minimum cost tour. However there is a special case for which this problem can be efficiently solved.

      Suppose all the cities are located in some Euclidean space and the cost of traveling from one city to another is a constant multiple of the distance between the cities. Give an efficient procedure for computing a tour whose cost is guaranteed to be within a factor of two of the cost of an optimum tour.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 58.


- fields:
    Front: |
      ## 06.03: Facility location problem

      Let \\(A_0, \ldots, A_{n-1}\\) be a set of \\(n\\) cities. We are trying to select \\(k\\) cities to locate warehouses. We want to choose the \\(k\\) cities in such a way that the cities are close to the warehouses. Let's say we define the cost of a warehouse assignment to be the maximum distance of any city to a warehouse.

      The problem of finding a warehouse assignment that has the minimum cost is known to be NP-complete.

      Design a fast algorithm for selecting warehouse locations that is provably within a constant factor of the optimum solution.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 58.


- fields:
    Front: |
      ## 06.04: Computing \\(x^n\\)

      A straight-line program for computing \\(x^n\\) is a finite sequence

      \\[
      x \mapsto x^{i_1} \mapsto \cdots \mapsto x^n
      \\]

      constructed as follows: the first element is \\(x\\); each succeeding element is either the square of some previously-computed element, or the product of any two previously-computed elements. The number of multiplications to evaluate \\(x^n\\) is the number of terms in the shortest such program sequence, minus one. No efficient method is known for the problem of determining the minimum number of multiplications needed to evaluate \\(x^n\\); the problem for multiple exponents is known to be NP-complete.

      How would you determine the minimum number of multiplications to evaluate \\(x^{30}\\)?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 59.


- fields:
    Front: |
      ## 06.05: CNF-SAT

      Design an algorithm for CNF-SAT. Your algorithm should use branch-and-bound to prune partial assignments that can easily be shown to be unsatisfiable.

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 59.


- fields:
    Front: |
      ## 06.06: Scheduling

      We need to schedule \\(N\\) lectures in \\(M\\) classrooms. Some of those lectures are prerequisites for others.

      How would you choose when and where to hold the lectures in order to finish all the lectures as soon as possible?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 59.


- fields:
    Front: |
      ## 06.07: Hardy-Ramanujan number

      The mathematician G. H. Hardy was on his way to visit his collaborator S. Ramanujan who was in the hospital. Hardy remarked to Ramanujan that he traveled in taxi cab number 1729, which seemed a dull one, and he hoped it was not a bad omen. To this, Ramanujan replied that 1729 was a very interesting number --- it was the smallest number expressible as the sum of cubes of two numbers in two different ways. Indeed, \\(10^3 + 9^3 = 12^3 + 1^3 = 1729\\).

      Given an arbitrary positive integer \\(n\\), how would you determine if it can be expressed as a sum of two cubes?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 59-60.


- fields:
    Front: |
      ## 06.08: Collatz conjecture

      Lothar Collatz proposed this remarkable conjecture in 1937: "Define \\(C: \\{1,2,3,\ldots\\} \mapsto \\{1,2,3,\ldots\\}\\) as follows: if \\(n\\) is even, \\(C(n) = n/2\\), else \\(C(n) = 3n + 1\\). Then for any choice of \\(n\\), \\(C^i(n) = 1\\), for some \\(i\\).""

      For example, if we start with the number 11 and iteratively compute \\(C^i(11)\\), we get the sequence 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1.

      Despite intense efforts, the Collatz conjecture has not been proved or disproved.

      Suppose you are given the task of proving or disproving the Collatz conjecture for the first billion integers. A direct approach would be to compute the convergence sequence for each number in this set.

      How would you prove that Collatz hypothesis works for at least the first \\(N\\) integers? What is the runtime of your algorithm?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 60.


- fields:
    Front: |
      ## 06.09: Nearest points in the plane

      Instead of having single integers in the array, if you have integral points in a two-dimensional plane, the problem of finding a closest pair of points becomes significantly more difficult. There are fast exact algorithms for this problem, but they are tricky to analyze and implement. Can you design a heuristic for identifying the closest pair of points?

      You are given a list of pairs of points in the two-dimensional Cartesian plane. Each point has integer \\(x\\) and \\(y\\) coordinates. How would you find the two closest points?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 60.


- fields:
    Front: |
      ## 06.10: Primality checking

      Primality checking has received a great deal of attention from mathematicians and theoretical computer scientists, and there are a number of highly sophisticated approaches to efficiently solving this problem. One reason for this is that number theory plays a key role in cryptography.

      The brute-force approach to checking if \\(n\\) is a prime is to divide \\(n\\) by every smaller number. The size of input here is the number of bits in \\(n\\), and hence the brute-force algorithm has exponential time complexity.

      In an interview context, if you are asked to implement primality checking, you are just expected to provide some simple improvements over the basic brute-force approach.

      Implement a function which takes a number \\(n\\) and returns whether the number is prime or not. What is the runtime of your algorithm?

      --- Aziz and Prakash; _Algorithms for Interviews_; version 1.0.0 (September 1, 2010); p 60-1.

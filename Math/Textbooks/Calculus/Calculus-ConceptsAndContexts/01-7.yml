defaults:
  deckName: Staging
  modelName: PWeave
  markdownTabLength: 2
  extraTags:
  - Textbooks
  - Math
  - Calculus
  - Calculus-ConceptsAndContexts
  - CCAC-01-FunctionsAndModels
  - CCAC-01.7-ParametricCurves
notes:
- id: 1543347406595
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 01: Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = t^2 + t, \ y = t^2 - t, \ -2 \le t \le 2
      $$
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return t**2 + t
      def fy(t): return t**2 - t
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -2, 2)),
        xlim = (-1, 11), ylim = (-1, 7),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, fx, fy, -1.8, 0.01, 0.19)
      aro(ax, fx, fy, 1.8, 0.01, 0.19)
      ax.plot(fx(-2), fy(-2), 'ko', markersize = 4)
      ax.text(fx(-2)+0.1, fy(-2)+0.1, '(2,6), $t=-2$', )
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)+0.2, fy(0)+0.2, '(0,0), $t=0$', )
      ax.plot(fx(2), fy(2), 'ko', markersize = 4)
      ax.text(fx(2)+0.1, fy(2)+0.1, '(6,2), $t=2$', )

      p._backend.show()
      ```
    Annotations: ''
- id: 1543347406744
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 03: Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = \cos^2{t}, \ y = 1 - \sin{t}, \ 0 \le t \le \pi/2
      $$
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.cos(t)**2
      def fy(t): return 1 - sy.sin(t)
      def ffx(t): return math.cos(t)**2
      def ffy(t): return 1 - math.sin(t)
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, 0, sy.pi/2)),
        xlim = (-0.1, 1.7), ylim = (-0.1, 1.1),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, math.pi/4, 0.01, 0.03)
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)+0.02, fy(0)+0.02, '(1,1), $t=0$', )
      ax.plot(fx(sy.pi/6), fy(sy.pi/6), 'ko', markersize = 4)
      ax.text(fx(sy.pi/6)-0.02, fy(sy.pi/6)+0.02, '$t=\\pi/6$', horizontalalignment='right')
      ax.plot(fx(sy.pi/3), fy(sy.pi/3), 'ko', markersize = 4)
      ax.text(fx(sy.pi/3)-0.02, fy(sy.pi/3)+0.02, '$t=\\pi/3$', horizontalalignment='right')
      ax.plot(fx(sy.pi/2), fy(sy.pi/2), 'ko', markersize = 4)
      ax.text(fx(sy.pi/2)-0.02, fy(sy.pi/2)+0.05, '$t=\\pi/2$', horizontalalignment='right')

      p._backend.show()
      ```
    Annotations: ''
- id: 1543347406871
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 05:
      a. Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = 3t - 5, \ y = 2t + 1
      $$
      b. Eliminate the parameter to find a Cartesian equation of the curve.
    Back: |
      a.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return 3*t - 5
      def fy(t): return 2*t + 1
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -1.1, 2.1)),
        xlim = (-10, 2), ylim = (-2, 6),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, fx, fy, 0.5, 0.01, 0.2)
      ax.plot(fx(-1), fy(-1), 'ko', markersize = 4)
      ax.text(fx(-1)-0.1, fy(-1)+0.1, '(-8,-1), $t=-2$', horizontalalignment='right')
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)-0.1, fy(0)+0.1, '(-5,1), $t=0$', horizontalalignment='right')
      ax.plot(fx(1), fy(1), 'ko', markersize = 4)
      ax.text(fx(1)-0.1, fy(1)+0.1, '(-2,3), $t=1$', horizontalalignment='right')
      ax.plot(fx(2), fy(2), 'ko', markersize = 4)
      ax.text(fx(2)+0.2, fy(2)-0.8, '(1,5), $t=2$', horizontalalignment='center')

      p._backend.show()
      ```
      b. $y = \frac{2}{3}x + \frac{13}{3}$
    Annotations: ''
- id: 1543347407019
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 07:
      a. Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = \sqrt{t}, \ y = 1 - t
      $$
      b. Eliminate the parameter to find a Cartesian equation of the curve.
    Back: |
      a.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.sqrt(t)
      def fy(t): return 1 - t
      def ffx(t): return math.sqrt(t)
      def ffy(t): return 1 - t
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, 0, 5)),
        xlim = (-1, 8), ylim = (-4, 2),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, 0.25, 0.01, 0.15)
      ax.plot(ffx(0), ffy(0), 'ko', markersize = 4)
      ax.text(ffx(0)+0.1, ffy(0)+0.2, '(0,1), $t=0$')
      ax.plot(ffx(1), ffy(1), 'ko', markersize = 4)
      ax.text(ffx(1)+0.1, ffy(1)+0.2, '(1,0), $t=1$')
      ax.plot(ffx(4), ffy(4), 'ko', markersize = 4)
      ax.text(ffx(4)+0.1, ffy(4)+0.2, '(2,-3), $t=4$')

      p._backend.show()
      ```
      b. $y = 1 - x^2$, $x \ge 0$
    Annotations: ''
  tags: []
- id: 1543349723169
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 09:
      a. Eliminate the parameter to find a Cartesian equation of the curve.
      $$
      x = \sin{\frac{1}{2}\theta}, \ y = \cos{\frac{1}{2}\theta}, \ -\pi \le \theta \le \pi
      $$
      b. Sketch the curve, and indicate with an arrow the direction in which the curve is traced as the parameter increases.
    Back: |
      a. $x^2 + y^2 = 1$, $y \ge 0$
      b.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.sin(t/2)
      def fy(t): return sy.cos(t/2)
      def ffx(t): return math.sin(t/2)
      def ffy(t): return math.cos(t/2)
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -sy.pi, sy.pi)),
        xlim = (-1.5, 1.5), ylim = (-0.5, 1.5),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax
      aro(ax, ffx, ffy, -math.pi/2, 0.01, 0.05)
      p._backend.show()
      ```
    Annotations: Issues:<div>- When imagining the graph, I mentally incorrectly doubled
      instead of halved \(\theta\).</div><div>- I incorrectly assumed \(y = \sin{\frac{1}{2}\theta}\),
      instead of \(x\).</div><div><br></div><div>Fixes:</div><div>- Read and copy
      full problem, verify all components correct.</div>
  tags:
  - ann:trouble
- id: 1543349723344
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 11:
      a. Eliminate the parameter to find a Cartesian equation of the curve.
      $$
      x = \sin{t}, \ y = \csc{t}, \ 0 < t < \pi/2
      $$
      b. Sketch the curve, and indicate with an arrow the direction in which the curve is traced as the parameter increases.
    Back: |
      a. $y = 1/x$, $1 < y$
      b.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.sin(t)
      def fy(t): return sy.csc(t)
      def ffx(t): return math.sin(t)
      def ffy(t): return 1/math.sin(t)
      def aro(ax, fx, fy, s, d, w):
        def dx(a,b): return fx(b) - fx(a)
        def dy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dx(s-d, s+d), dy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, 0, sy.pi/2)),
        xlim = (-4, 5), ylim = (-1, 5),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, math.pi/8, 0.01, 0.15)
      ax.plot(ffx(math.pi/2), ffy(math.pi/2), 'ko', fillstyle = 'none', markersize = 4)
      ax.text(ffx(math.pi/2)+0.1, ffy(math.pi/2)+0.1, '(1,1)')

      p._backend.show()
      ```
    Annotations: ''
  tags: []
- id: 1543349723474
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 13:
      a. Eliminate the parameter to find a Cartesian equation of the curve.
      $$
      x = e^{2t}, \ y = t + 1
      $$
      b. Sketch the curve, and indicate with an arrow the direction in which the curve is traced as the parameter increases.
    Back: |
      a. $y = \frac{1}{2} \ln{x+1}$
      b.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.E**(2*t)
      def fy(t): return t + 1
      def ffx(t): return math.e**(2*t)
      def ffy(t): return t + 1
      def aro(ax, fx, fy, s, d, w):
        def dx(a,b): return fx(b) - fx(a)
        def dy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dx(s-d, s+d), dy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -10, sy.pi/2)),
        xlim = (-2, 7), ylim = (-3, 3),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, 0.25, 0.01, 0.15)
      # ax.plot(ffx(math.pi/2), ffy(math.pi/2), 'ko', fillstyle = 'none', markersize = 4)
      # ax.text(ffx(math.pi/2)+0.1, ffy(math.pi/2)+0.1, '(1,1)')

      p._backend.show()
      ```
    Annotations: ''
- id: 1543349723594
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 15:
      a. Eliminate the parameter to find a Cartesian equation of the curve.
      $$
      x = \sin{\theta}, \ y = \cos{2\theta}
      $$
      b. Sketch the curve, and indicate with an arrow the direction in which the curve is traced as the parameter increases.
    Back: |
      a. $y = 1 - 2x^2$, $-1 \le x \le 1$
      b.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.sin(t)
      def fy(t): return sy.cos(2*t)
      def ffx(t): return math.sin(t)
      def ffy(t): return math.cos(2*t)
      def aro(ax, fx, fy, s, d, w):
        def dx(a,b): return fx(b) - fx(a)
        def dy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dx(s-d, s+d), dy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -sy.pi, sy.pi)),
        xlim = (-3, 3), ylim = (-1.5, 1.5),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, -math.pi/4, 0.1, 0.10)
      aro(ax, ffx, ffy, math.pi/4, 0.1, 0.10)
      aro(ax, ffx, ffy, -3*math.pi/4, 0.1, 0.10)
      aro(ax, ffx, ffy, 3*math.pi/4, 0.1, 0.10)
      ax.plot(ffx(-math.pi/2), ffy(-math.pi/2), 'ko', markersize = 4)
      ax.plot(ffx(math.pi/2), ffy(math.pi/2), 'ko', markersize = 4)
      ax.text(ffx(-math.pi/2)+0.1, ffy(-math.pi/2)+0.1, '(-1,-1)')
      ax.text(ffx(math.pi/2)+0.1, ffy(math.pi/2)+0.1, '(1,-1)')

      p._backend.show()
      ```
    Annotations: ''
- id: 1543349943294
  fields:
    Front: |
      CCAC 01.7 17: Describe the motion of a particle with position $(x,y)$ as $t$ varies in the given interval.
      $$
      x = 3 + 2\cos{t}, \ y = 1 + 2\sin{t}, \ \pi/2 \le t \le 3\pi/2
      $$
    Back: |
      Moves counterclockwise along the circle $(x-3)^2 + (y-1)^2 = 4$ from $(3,3)$ to $(3,-1)$.
    Annotations: ''
- id: 1543349943443
  fields:
    Front: |
      CCAC 01.7 19: Describe the motion of a particle with position $(x,y)$ as $t$ varies in the given interval.
      $$
      x = 5\sin{t}, \ y = 2\cos{t}, \ -\pi \le t \le 5\pi
      $$
    Back: |
      Moves 3 times clockwise around the ellipse $(x^2/25) + (y^2/4) = 1$, starting and ending at $(0, -2)$.
    Annotations: 'Thoughts:<div>- This gives a good canonical description of a simple
      ellipse with axes lengths \(a\) and \(b\) on \(x\) and \(y\) axes, centered
      at \((x_1,y_1)\): \[ \left(\frac{x-x_1}{a}\right)^2 + \left(\frac{y-y_1}{b}\right)^2
      = 1.\]</div>'
  tags:
  - ann:thoughts
- id: 1543350081294
  fields:
    Front: >
      CCAC 01.7 21: Suppose a curve is given by the parametric equations $x=f(t)$,
      $y=g(t)$, where the range of $f$ is $[1,4]$ and the range of $g$ is $[2,3]$.
      What can you say about the curve?
    Back: |
      It is contained in the rectangle described by $1 \le x \le 4$ and $2 \le y \le 3$.
    Annotations: ''
- id: 1543351003944
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 23: Use the graphs of $x=f(t)$ and $y=g(t)$ below to sketch the parametric curve $x=f(t), \ y=g(t)$. Indicate with arrows the direction in which the curve is traced as $t$ increases.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plot(
        t**2 - 1,
        xlim = (-3, 3),
        ylim = (-2, 2),
        xlabel = '$t$',
        ylabel = '$x$',
      )
      ```
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plot(
        t**3,
        xlim = (-3, 3),
        ylim = (-2, 2),
        xlabel = '$t$',
        ylabel = '$y$',
      )
      ```
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return t**2 - 1
      def fy(t): return t**3
      def aro(ax, fx, fy, s, d, w):
        def dx(a,b): return fx(b) - fx(a)
        def dy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dx(s-d, s+d), dy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t)),
        xlim = (-3, 3),
        ylim = (-2, 2),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, fx, fy, -1.15, 0.01, 0.10)
      ax.plot(fx(-1), fy(-1), 'ko', markersize = 4)
      ax.text(fx(-1)+0.1, fy(-1)+0.1, '(0,-1), $t=-1$')
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)-0.1, fy(0)+0.1, '(0,1), $t=1$', horizontalalignment = 'right')
      ax.plot(fx(1), fy(1), 'ko', markersize = 4)
      ax.text(fx(1)+0.1, fy(1)-0.1, '(0,1), $t=1$')
      aro(ax, fx, fy, 1.15, 0.01, 0.10)
      ax.tick_params(
        axis = 'both',
        which = 'both',
        bottom = False,
        left = False,
        labelbottom = False,
        labelleft = False,
      )

      p._backend.show()
      ```
    Annotations: 'Issues:<div>- Got shape wrong but close. My mistake: at \(t=0\),
      I assumed \(y\) was changing faster than \(x\), so wrote a rounded turn.</div>'
  tags: []
- id: 1543351010369
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 25: Use the graphs of $x=f(t)$ and $y=g(t)$ below to sketch the parametric curve $x=f(t), \ y=g(t)$. Indicate with arrows the direction in which the curve is traced as $t$ increases.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plot(
        (sy.sin(4*sy.pi*t), (t, 0, 1)),
        xlim = (-0, 1),
        ylim = (-1.5, 1.5),
        xlabel = '$t$',
        ylabel = '$x$',
      )
      ```
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plot(
        (sy.sin(sy.pi*t), (t, 0, 1)),
        xlim = (-0, 1),
        ylim = (-1.5, 1.5),
        xlabel = '$t$',
        ylabel = '$y$',
      )
      ```
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.sin(4*sy.pi*t)
      def fy(t): return sy.sin(sy.pi*t)
      def ffx(t): return math.sin(4*math.pi*t)
      def ffy(t): return math.sin(math.pi*t)
      def aro(ax, fx, fy, s, d, w):
        def dx(a,b): return fx(b) - fx(a)
        def dy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dx(s-d, s+d), dy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, 0, 1)),
        xlim = (-1.5, 1.5),
        ylim = (-0.5, 1.5),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)+0.05, fy(0)+0.1, '$t=0$')
      aro(ax, ffx, ffy, 0.05, 0.001, 0.05)
      aro(ax, ffx, ffy, 0.30, 0.001, 0.05)
      ax.plot(fx(1/2), fy(1/2), 'ko', markersize = 4)
      ax.text(fx(1/2)+0.05, fy(1/2)+0.1, '$t=1/2$')
      aro(ax, ffx, ffy, 1-0.05, 0.001, 0.05)
      aro(ax, ffx, ffy, 1-0.30, 0.001, 0.05)

      p._backend.show()
      ```
    Annotations: ''
- id: 1543351490194
  tags:
  - requiresCoding
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 27: Use software to graph the curve $x=y-2\sin{\pi y}$.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return t-2*sy.sin(sy.pi*t)
      def fy(t): return t

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -sy.pi, sy.pi)),
        xlim = (-6, 6),
        xlabel = '$x$',
        ylabel = '$y$',
      )
      ```
    Annotations: ''
- id: 1543351490370
  fields:
    Front: |
      CCAC 01.7 29:
      a. Show that the parametric equations
      $$
      x = x_1 + (x_2 - x_1)t, \ y = y_1 + (y_2 - y_1)t, \ 0 \le t \le 1
      $$
      describes the line segment that joins the points $P_1(x_1, y_1)$ and $P_2(x_2, y_2)$.
      b. Find parametric equations to represent the line segment from $(-2, 7)$ to $(3, -1)$.
    Back: |
      a. Outline of the proof:

      - Show that a line $P(t)$ is described by the parametric equations with $\mathbb{R}$ as the domain of $t$.
      - Show that they describe $P_1(x_1, y_1)$ when $t=0$ and $P_2(x_2, y_2)$ when $t=1$.
      - Show that $P(t)$ is within the line segment whenever $t\in(0,1)$.

      Proof:

      - To see that a line $P(t)$ is described by the parametric equations with $\mathbb{R}$ as the domain of $t$, we first solve for $t$:
        $$
        \frac{x-x_1}{x_2-x_1} = t = \frac{y-y_1}{y_2-y_1}
        $$
        The left and right sides can then be solved for $y$:
        $$
        \begin{align}
          y &= (x-x_1)\frac{y_2-y_1}{x_2-x_1} + y_1 \\
            &= x\frac{y_2-y_1}{x_2-x_1} + \left( y_1 - x_1\frac{y_2-y_1}{x_2-x_1} \right) \\
        \end{align}
        $$
        This last is a slope-intercept description of a line, which shows that the parametric equations $P(t)$
        $$
        x = x_1 + (x_2 - x_1)t, \ y = y_1 + (y_2 - y_1)t
        $$
        describe the same line.
      - Now observe that $x = x_1$ and $y = y_1$ when $t=0$; and that $x = x_1 + x_2 - x_1 = x_2$ and similarly $y = y_2$ when $t=1$. Thus $P(0)$ and $P(1)$ describe the endpoints of the line segment.
      - Finally, we claim without proof that for $t\in(0,1)$, $|P(t)-P(0)|<|P(1)-P(0)|$ and $|P(t)-P(1)|<|P(1)-P(0)|$, and thus $P(t)$ lies on the line segment. We're feeling lazy, so won't go through all the steps to prove this.

      b. $x = -2 + 5t$, $y = 7 - 8t$, $0 \le t \le 1$.
    Annotations: Issues:<div>- Flubbed part (b). Was supposed to find <i>parametric</i>&nbsp;equations,
      not <i>cartesian</i>&nbsp;equations.</div>
  tags:
  - ann:trouble
- id: 1543352284844
  fields:
    Front: >
      CCAC 01.7 31a: Find parametric equations for the path of a particle that moves
      along the circle $x^2+(y-1)^2=4$ once around clockwise, starting at $(2,1)$.
    Back: |
      $x = 2\cos{t}$, $y = 1 - 2\sin{t}$, $0 \le t \le 2\pi$
    Annotations: ''
- id: 1543352285019
  fields:
    Front: >
      CCAC 01.7 31b: Find parametric equations for the path of a particle that moves
      along the circle $x^2+(y-1)^2=4$ three times around counterclockwise, starting
      at $(2,1)$.
    Back: |
      $x = 2\cos{t}$, $y = 1 - 2\sin{t}$, $0 \le t \le 6\pi$
    Annotations: ''
- id: 1543352285152
  fields:
    Front: >
      CCAC 01.7 31c: Find parametric equations for the path of a particle that moves
      along the circle $x^2+(y-1)^2=4$ halfway around counterclockwise, starting at
      $(0,3)$.
    Back: |
      $x = 2\cos{t}$, $y = 1 - 2\sin{t}$, $-\pi/2 \le t \le 3\pi/2$
    Annotations: 'Thoughts: there are multiple solutions, so this question is somewhat
      ambiguous.'
  tags:
  - ann:thoughts
- id: 1543352285294
  useMarkdown: pweave
  tags:
  - requiresCoding
  fields:
    Front: |
      CCAC 01.7 33: Use software to reproduce the picture below.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (
          2*sy.cos(t) + 2,
          2*sy.sin(t) + 2,
          (t, 0, 2*sy.pi),
        ),
        (
          sy.cos(t) + 2,
          sy.sin(t) + 2,
          (t, sy.pi, 2*sy.pi),
        ),
        (
          0.07*sy.cos(t) + 1,
          0.07*sy.sin(t) + 3,
          (t, 0, 2*sy.pi),
        ),
        (
          0.07*sy.cos(t) + 3,
          0.07*sy.sin(t) + 3,
          (t, 0, 2*sy.pi),
        ),
        xlim = (0, 6),
        ylim = (0, 4),
        xlabel = '$x$',
        ylabel = '$y$',
      )
      ```
    Back: |
      ```{python evaluate = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (2*sy.cos(t) + 2, 2*sy.sin(t) + 2, (t, 0, 2*sy.pi)),
        (sy.cos(t) + 2, sy.sin(t) + 2, (t, sy.pi, 2*sy.pi)),
        (0.07*sy.cos(t) + 1, 0.07*sy.sin(t) + 3, (t, 0, 2*sy.pi)),
        (0.07*sy.cos(t) + 3, 0.07*sy.sin(t) + 3, (t, 0, 2*sy.pi)),
        xlim = (0, 6), ylim = (0, 4),
        xlabel = '$x$', ylabel = '$y$',
      )
      ```
    Annotations: ''
- id: 1543352289731
  fields:
    Front: |
      CCAC 01.7 35: Compare the curves represented by the parametric equations. How do they differ?
      a. $x = t^3$, $y = t^2$
      b. $x = t^6$, $y = t^4$
      c. $x = e^{-3t}$, $y = e^{-2t}$
    Back: >
      The curve $y=x^{2/3}$ is generated in (a). In (b), only the portion with $x\ge
      0$ is generated, and in (c) we get only the portion with $x>0$.
    Annotations: Issues:<div>- Partially flubbed (b), assuming curve was odd, when
      actually \(x\) and \(y\) are nonnegative.</div><div>- Partially flubbed (c),
      assuming curve was linear.</div><div><br></div><div>Fixes:</div><div>- Should
      have tried to transform to cartesian equations, specifying domains.</div>
  tags:
  - ann:trouble
- id: 1543354284869
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 39: If $a$ and $b$ are fixed numbers, find parametric equations for the curve that consists of all possible positions of the point $P$ in the figure, using the angle $\theta$ as the parameter. Then eliminate the parameter and identify the curve.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (1.5*sy.cos(t), 1.5*sy.sin(t), (t, 0, 2*sy.pi)),
        (0.5*sy.cos(t), 0.5*sy.sin(t), (t, 0, 2*sy.pi)),
        (1.5*sy.cos(5/6*sy.pi)*t, 1.5*sy.sin(5/6*sy.pi)*t, (t, 0, 1)),
        (0.5*sy.cos(4/6*sy.pi)*t, 0.5*sy.sin(4/6*sy.pi)*t, (t, 0, 1)),
        (1.5*sy.cos(1/4*sy.pi)*t, 1.5*sy.sin(1/4*sy.pi)*t, (t, 0, 1)),
        (sy.cos(1/4*sy.pi)*(0.5 + (1.5 - 0.5)*t), 0.5*sy.sin(1/4*sy.pi), (t, 0, 1)),
        (1.5*sy.cos(1/4*sy.pi), sy.sin(1/4*sy.pi)*(0.5 + (1.5 - 0.5)*t), (t, 0, 1)),
        (sy.cos(1/4*sy.pi)*(1.3 + (1.5 - 1.3)*t), 0.7*sy.sin(1/4*sy.pi), (t, 0, 1)),
        (1.3*sy.cos(1/4*sy.pi), sy.sin(1/4*sy.pi)*(0.5 + (0.7 - 0.5)*t), (t, 0, 1)),
        xlim = (-3, 3),
        ylim = (-2, 2),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(-0.8, 0.55, '$a$')
      ax.text(-0.12, 0.3, '$b$')
      ax.text(0.2, 0.05, '$\\theta$')
      ax.text(-0.2, -0.25, '$O$')
      ax.text(1.05, 0.2, '$P$')
      ax.tick_params(
        axis = 'both',
        which = 'both',
        bottom = False,
        left = False,
        labelbottom = False,
        labelleft = False,
      )

      p._backend.show()
      ```
    Back: |
      $x = a\cos{\theta}$, $y = b\sin{\theta}$; $(x^2/a^2) + (y^2/b^2) = 1$, ellipse.
    Annotations: ''
- id: 1543354962519
  tags:
  - requiresCoding
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 41: Suppose that the position of one particle at time $t$ is given by
      $$
      x_1 = 3\sin{t}, \ y_1 = 2\cos{t}, \ 0 \le t \le 2\pi
      $$
      and the position of a second particle is given by
      $$
      x_2 = -3 + \cos{t}, \ y_2 = 1 + \sin{t}, \ 0 \le t \le 2\pi
      $$
      a. Use software to graph the paths of both particles. How many points of intersection are there?
      b. Are any of these points of intersection _collision points_? In other words, are the particles ever at the same place at the same time? If so, find the collision points.
      c. Describe what happens if the path of the second particle is given by
      $$
      x_2 = 3 + \cos{t}, \ y_2 = 1 + \sin{t}, \ 0 \le t \le 2\pi
      $$
    Back: |
      a. Two points of intersection.
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (3*sy.sin(t), 2*sy.cos(t), (t, 0, 2*sy.pi)),
        (-3 + sy.cos(t), 1 + sy.sin(t), (t, 0, 2*sy.pi)),
        xlim = (-6, 6), ylim = (-4, 4),
        xlabel = '$x$', ylabel = '$y$',
      )
      ```
      b. One collision point at $(-3,0)$ when $t = 3\pi/2$.
      c. There are still two intersection points, but no collision point.
    Annotations: ''
- id: 1543437734870
  tags:
  - requiresCoding
  useMarkdown: pweave
  fields:
    Front: >
      CCAC 01.7 43: Use software to investigate the family of curves defined by the
      parametric equations $x = t^2$, $y = t^3 - ct$. How does the shape change as
      $c$ increases? Illustrate by graphing several members of the family.
    Back: |
      For $c = 0$, there is a cusp; for $c > 0$, there is a loop whose size increases as $c$ increases.
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      def f(t, c): return t**2, t**3 - c*t
      p = sy.plotting.plot_parametric(
        f(t, -1), f(t, 0),
        xlim = (0, 1.5), ylim = (-3, 3),
        xlabel = '$x$', ylabel = '$y$',
        show = False
      )
      p[0].line_color = 'red'
      p[1].line_color = 'blue'
      p.show()
      ```
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      def f(t, c): return t**2, t**3 - c*t
      p = sy.plotting.plot_parametric(
        f(t, 1/2), f(t, 1),
        xlim = (0, 1.5), ylim = (-1, 1),
        xlabel = '$x$', ylabel = '$y$',
        show = False
      )
      p[0].line_color = 'red'
      p[1].line_color = 'blue'
      p.show()
      ```
    Annotations: ''
- id: 1543438171219
  tags:
  - requiresCoding
  useMarkdown: pweave
  fields:
    Front: >
      CCAC 01.7 45: The curves with equations $x=a\sin{nt}$, $y=b\cos{t}$ are called
      **Lissajous figures**. Use software to investigate how these curves vary when
      $a$, $b$, and $n$ vary. (Take $n$ to be a positive integer.)
    Back: |
      As $n$ increases, the number of oscillations increases; $a$ and $b$ determine the width and height.
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      def f(t, n, a, b): return a*sy.sin(n*t), b*sy.cos(t)
      p = sy.plotting.plot_parametric(
        f(t, 1, 1, 1), f(t, 2, 1, 1), f(t, 3, 1, 1),
        xlabel = '$x$', ylabel = '$y$',
        show = False
      )
      p[0].line_color = 'red'
      p[1].line_color = 'green'
      p[2].line_color = 'blue'
      p.show()
      ```
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      def f(t, n, a, b): return a*sy.sin(n*t), b*sy.cos(t)
      p = sy.plotting.plot_parametric(
        f(t, 3, 1, 1), f(t, 3, 2, 1), f(t, 3, 3, 1),
        xlabel = '$x$', ylabel = '$y$',
        show = False
      )
      p[0].line_color = 'red'
      p[1].line_color = 'green'
      p[2].line_color = 'blue'
      p.show()
      ```
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      def f(t, n, a, b): return a*sy.sin(n*t), b*sy.cos(t)
      p = sy.plotting.plot_parametric(
        f(t, 2, 1, 1), f(t, 2, 1, 2), f(t, 2, 1, 3),
        xlabel = '$x$', ylabel = '$y$',
        show = False
      )
      p[0].line_color = 'red'
      p[1].line_color = 'green'
      p[2].line_color = 'blue'
      p.show()
      ```
      ```{python }
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      t = sy.symbols('t')
      def f(t, n, a, b): return a*sy.sin(n*t), b*sy.cos(t)
      p = sy.plotting.plot_parametric(
        f(t, 3, 1, 1),
        f(t, 3, 2, 2),
        f(t, 3, 3, 3),
        xlabel = '$x$', ylabel = '$y$',
        show = False
      )
      p[0].line_color = 'red'
      p[1].line_color = 'green'
      p[2].line_color = 'blue'
      p.show()
      ```
    Annotations: ''

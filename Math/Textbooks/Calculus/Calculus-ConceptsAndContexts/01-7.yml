defaults:
  deckName: Staging
  modelName: PWeave
  markdownTabLength: 2
  extraTags:
  - Textbooks
  - Math
  - Calculus
  - Calculus-ConceptsAndContexts
  - CCAC-01-FunctionsAndModels
  - CCAC-01.7-ParametricCurves
notes:
- id: 1543347406595
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 01: Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = t^2 + t, \ y = t^2 - t, \ -2 \le t \le 2
      $$
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return t**2 + t
      def fy(t): return t**2 - t
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -2, 2)),
        xlim = (-1, 11), ylim = (-1, 7),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, fx, fy, -1.8, 0.01, 0.19)
      aro(ax, fx, fy, 1.8, 0.01, 0.19)
      ax.plot(fx(-2), fy(-2), 'ko', markersize = 4)
      ax.text(fx(-2)+0.1, fy(-2)+0.1, '(2,6), $t=-2$', )
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)+0.2, fy(0)+0.2, '(0,0), $t=0$', )
      ax.plot(fx(2), fy(2), 'ko', markersize = 4)
      ax.text(fx(2)+0.1, fy(2)+0.1, '(6,2), $t=2$', )

      p._backend.show()
      ```
- id: 1543347406744
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 03: Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = \cos^2{t}, \ y = 1 - \sin{t}, \ 0 \le t \le \pi/2
      $$
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.cos(t)**2
      def fy(t): return 1 - sy.sin(t)
      def ffx(t): return math.cos(t)**2
      def ffy(t): return 1 - math.sin(t)
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, 0, sy.pi/2)),
        xlim = (-0.1, 1.7), ylim = (-0.1, 1.1),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, math.pi/4, 0.01, 0.03)
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)+0.02, fy(0)+0.02, '(1,1), $t=0$', )
      ax.plot(fx(sy.pi/6), fy(sy.pi/6), 'ko', markersize = 4)
      ax.text(fx(sy.pi/6)-0.02, fy(sy.pi/6)+0.02, '$t=\\pi/6$', horizontalalignment='right')
      ax.plot(fx(sy.pi/3), fy(sy.pi/3), 'ko', markersize = 4)
      ax.text(fx(sy.pi/3)-0.02, fy(sy.pi/3)+0.02, '$t=\\pi/3$', horizontalalignment='right')
      ax.plot(fx(sy.pi/2), fy(sy.pi/2), 'ko', markersize = 4)
      ax.text(fx(sy.pi/2)-0.02, fy(sy.pi/2)+0.05, '$t=\\pi/2$', horizontalalignment='right')

      p._backend.show()
      ```
- id: 1543347406871
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 05:
      a. Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = 3t - 5, \ y = 2t + 1
      $$
      b. Eliminate the parameter to find a Cartesian equation of the curve.
    Back: |
      a.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return 3*t - 5
      def fy(t): return 2*t + 1
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, -1.1, 2.1)),
        xlim = (-10, 2), ylim = (-2, 6),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, fx, fy, 0.5, 0.01, 0.2)
      ax.plot(fx(-1), fy(-1), 'ko', markersize = 4)
      ax.text(fx(-1)-0.1, fy(-1)+0.1, '(-8,-1), $t=-2$', horizontalalignment='right')
      ax.plot(fx(0), fy(0), 'ko', markersize = 4)
      ax.text(fx(0)-0.1, fy(0)+0.1, '(-5,1), $t=0$', horizontalalignment='right')
      ax.plot(fx(1), fy(1), 'ko', markersize = 4)
      ax.text(fx(1)-0.1, fy(1)+0.1, '(-2,3), $t=1$', horizontalalignment='right')
      ax.plot(fx(2), fy(2), 'ko', markersize = 4)
      ax.text(fx(2)+0.2, fy(2)-0.8, '(1,5), $t=2$', horizontalalignment='center')

      p._backend.show()
      ```
      b. $y = \frac{2}{3}x + \frac{13}{3}$
- id: 1543347407019
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.7 07:
      a. Sketch a curve using the parametric equations below to plot points. Indicate with an arrow the direction in which the curve is traced as $t$ increases.
      $$
      x = \sqrt{t}, \ y = 1 - t
      $$
      b. Eliminate the parameter to find a Cartesian equation of the curve.
    Back: |
      a.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def fx(t): return sy.sqrt(t)
      def fy(t): return 1 - t
      def ffx(t): return math.sqrt(t)
      def ffy(t): return 1 - t
      def aro(ax, fx, fy, s, d, w):
        def dfx(a,b): return fx(b) - fx(a)
        def dfy(a,b): return fy(b) - fy(a)
        return ax.arrow(fx(s-d), fy(s-d), dfx(s-d, s+d), dfy(s-d, s+d), head_width = w)

      t = sy.symbols('t')
      p = sy.plotting.plot_parametric(
        (fx(t), fy(t), (t, 0, 5)),
        xlim = (-1, 8), ylim = (-4, 2),
        xlabel = '$x$', ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'): p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      aro(ax, ffx, ffy, 0.25, 0.01, 0.15)
      ax.plot(ffx(0), ffy(0), 'ko', markersize = 4)
      ax.text(ffx(0)+0.1, ffy(0)+0.2, '(0,1), $t=0$')
      ax.plot(ffx(1), ffy(1), 'ko', markersize = 4)
      ax.text(ffx(1)+0.1, ffy(1)+0.2, '(1,0), $t=1$')
      ax.plot(ffx(4), ffy(4), 'ko', markersize = 4)
      ax.text(ffx(4)+0.1, ffy(4)+0.2, '(2,-3), $t=4$')

      p._backend.show()
      ```
      b. $y = \frac{2}{3}x + \frac{13}{3}$

defaults:
  deckName: Staging
  modelName: PWeave
  markdownTabLength: 2
  extraTags:
  - Textbooks
  - Math
  - Calculus
  - Calculus-ConceptsAndContexts
  - CCAC-C-Trigonometry
notes:
- id: 1546117771339
  tags: []
  fields:
    Front: |
      CCAC C 01a: Convert from degrees to radians.
      $$
      210^\circ
      $$
    Back: |
      $7 \pi/6$
    Annotations: ''
- id: 1546117772525
  tags: []
  fields:
    Front: |
      CCAC C 01b: Convert from degrees to radians.
      $$
      9^\circ
      $$
    Back: |
      $\pi/20$
    Annotations: ''
- id: 1546117772726
  tags: []
  fields:
    Front: |
      CCAC C 03a: Convert from radians to degrees.
      $$
      4\pi
      $$
    Back: |
      $720^\circ$
    Annotations: ''
- id: 1546117773065
  tags: []
  fields:
    Front: |
      CCAC C 03b: Convert from radians to degrees.
      $$
      -\frac{3\pi}{8}
      $$
    Back: |
      $-67.5^\circ$
    Annotations: ''
- id: 1546117773336
  tags: []
  fields:
    Front: |
      CCAC C 05: Find the length of a circular arc subtended by an angle of $\pi/12$ rad if the radius of the circle is 36 cm.
    Back: |
      $3\pi$ cm
    Annotations: ''
- id: 1546117773589
  tags: []
  fields:
    Front: |
      CCAC C 07: A circle has radius 1.5 m. What angle is subtended at the center of the circle by an arc 1 m long?
    Back: |
      $\frac{2}{3}\text{ rad} = (120/\pi)^\circ$
    Annotations: ''
- id: 1546117773740
  useMarkdown: pweave
  tags: []
  fields:
    Front: |
      CCAC C 09a: Draw, in standard position, the angle whose measure is given.
      $$
      315^\circ
      $$
    Back: |
      ```{python echo = False}
      import matplotlib.pyplot as plt
      import matplotlib as mp
      import numpy as np
      import math

      fig, ax = plt.subplots()

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def s(x): return math.sin(x*math.pi/180)
      def c(x): return math.cos(x*math.pi/180)

      arc = mp.patches.Arc((0,0), 2, 2, 0, 0, 315)
      ax.add_patch(arc)
      ax.arrow(c(303), s(303), 0.01, 0.01, head_length = 0.20, head_width = 0.1, color = 'k')
      ax.plot((0, 2), (0, -2), color = 'k')

      ax.axhline(y = 0, color = 'k', linewidth = 0.5)
      ax.axvline(x = 0, color = 'k', linewidth = 0.5)
      ax.axes.get_xaxis().set_visible(False)
      ax.axes.get_yaxis().set_visible(False)
      plt.xlim((-3, 3))
      plt.ylim((-2, 2))
      plt.show()
      ```
    Annotations: ''

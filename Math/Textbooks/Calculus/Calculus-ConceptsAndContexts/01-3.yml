defaults:
  deckName: Staging
  modelName: PWeave
  extraTags:
  - Textbooks
  - Math
  - Calculus
  - Calculus-ConceptsAndContexts
  - CCAC-01-FunctionsAndModels
  - CCAC-01.3-NewFunctionsFromOld
  markdownTabLength: 2
notes:
- id: 1542483083194
  fields:
    Front: |
      CCAC 01.3 01a: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by shifting 3 units upward.
    Back: |
      $$
      y = f(x) + 3
      $$
- id: 1542483083331
  fields:
    Front: |
      CCAC 01.3 01b: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by shifting 3 units downward.
    Back: |
      $$
      y = f(x) - 3
      $$
- id: 1542483083447
  fields:
    Front: |
      CCAC 01.3 01c: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by shifting 3 units to the right.
    Back: |
      $$
      y = f(x - 3)
      $$
- id: 1542483083544
  fields:
    Front: |
      CCAC 01.3 01d: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by shifting 3 units to the left.
    Back: |
      $$
      y = f(x + 3)
      $$
- id: 1542483083644
  fields:
    Front: |
      CCAC 01.3 01e: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by reflecting about the $x$ axis.
    Back: |
      $$
      y = -f(x)
      $$
- id: 1542483083744
  fields:
    Front: |
      CCAC 01.3 01f: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by reflecting about the $y$ axis.
    Back: |
      $$
      y = f(-x)
      $$
- id: 1542483083843
  fields:
    Front: |
      CCAC 01.3 01g: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by stretching vertically by a factor of 3.
    Back: |
      $$
      y = 3f(x)
      $$
- id: 1542483083950
  fields:
    Front: |
      CCAC 01.3 01h: Suppose the graph of $f$ is given. Write the equation for the graph obtained from the graph of $f$ by shrinking vertically by a factor of 3.
    Back: |
      $$
      y = \frac{1}{3} f(x)
      $$
- id: 1542483084044
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 03: Match each equation with its graph, and give reasons for your choices.
      a. $y = f(x-4)$
      b. $y = f(x) + 3$
      c. $y = \frac{1}{3}f(x)$
      d. $y = -f(x+4)$
      e. $y = 2f(x+6)$
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      from matplotlib import style
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def f(x):
        # Starting with the graph of $f$ from the text, which looks like a
        # parabola with max 3, gives $f(x) = a(x-b)^2+3$ with $a$ and $b$
        # to be solved such that $f(0) = 1$, and $f(3) = 0$; this gives:
        #   f(0) = a*b**2 + 3 == 1,
        #   whence
        #     b**2 = -2/a,
        #   and
        #     b = math.sqrt(-2/a),
        # and
        #   f(3) = a(3-b)**2 + 3 == 9*a - 6*a*b + a*b**2 + 3 == 0.
        # Substituting $b$ and setting
        #   c = -math.sqrt(-a)
        # gives
        #   -9*c**2 + 6*math.sqrt(2)*c + 1 == 0.
        # Solve for $c$ using the quadratic formula, then solve for $a$ using # $c$, then solve for $b$ using $a$.

        A = -9
        B = 6*math.sqrt(2)
        C = 1
        c = (-B - math.sqrt(B**2 - 4*A*C))/(2*A)
        a = -c**2
        b = math.sqrt(-2/a)
        return a*(x-b)**2 + 3

      x = sy.symbols('x')
      p = sy.plot(
        (f(x), (x, 0, 3)),
        (f(x-4), (x, 0+4, 3+4)),
        (f(x)+3, (x, 0, 3)),
        (f(x)/3, (x, 0, 3)),
        (-f(x+4), (x, 0-4, 3-4)),
        (2*f(x+6), (x, 0-6, 3-6)),
        xlim = (-8,9),
        ylim = (-4,7),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )
      p[0].line_color = 'r'

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(1.2, 3.25, '$f$')
      ax.text(5.2, 3.25, '3')
      ax.text(1.2, 6.25, '1')
      ax.text(1.2, 1.25, '4')
      ax.text(1.2-4, -3.65, '5')
      ax.text(1.2-6, 6.25, '2')

      p._backend.show()
      ```
    Back: |
      a. 3; $f(x-4)$ translates $f$ 4 units rightward.
      b. 1; $f(x)+3$ translates $f$ 3 units upward.
      c. 4; $\frac{1}{3}f(x)$ shrinks $f$ vertically by a factor of 3.
      d. 5; $-f(x+4)$ translates $f$ 4 units leftward and reflects $f$ about the $x$ axis.
      3. 2; $2f(x+6)$ translates $f$ 6 units leftward and stretches $f$ vertically by a factor of 2.
- id: 1542515572444
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 05a: The graph of $f$ is given. Use it to graph $y=f(2x)$.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          (x + 1, (x, 0, 1)),
          (-x + 3, (x, 1, 4)),
          (0.5*x - 3, (x, 4, 6)),
          xlim = (-3,9),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          ((2*x) + 1, (x, 0/2, 1/2)),
          (-(2*x) + 3, (x, 1/2, 4/2)),
          (0.5*(2*x) - 3, (x, 4/2, 6/2)),
          xlim = (-3,9),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
- id: 1542515575369
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 05b: The graph of $f$ is given. Use it to graph $y=f(\frac{1}{2}x)$.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          (x + 1, (x, 0, 1)),
          (-x + 3, (x, 1, 4)),
          (0.5*x - 3, (x, 4, 6)),
          xlim = (-3,9),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          ((x/2) + 1, (x, 2*0, 2*1)),
          (-(x/2) + 3, (x, 2*1, 2*4)),
          (0.5*(x/2) - 3, (x, 2*4, 2*6)),
          xlim = (-0,12),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
- id: 1542515577820
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 05c: The graph of $f$ is given. Use it to graph $y=f(-x)$.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          (x + 1, (x, 0, 1)),
          (-x + 3, (x, 1, 4)),
          (0.5*x - 3, (x, 4, 6)),
          xlim = (-3,9),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          ((-x) + 1, (x, -0, -1)),
          (-(-x) + 3, (x, -1, -4)),
          (0.5*(-x) - 3, (x, -4, -6)),
          xlim = (-9,3),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
- id: 1542515580318
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 05d: The graph of $f$ is given. Use it to graph $y=-f(-x)$.
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          (x + 1, (x, 0, 1)),
          (-x + 3, (x, 1, 4)),
          (0.5*x - 3, (x, 4, 6)),
          xlim = (-3,9),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      with plt.style.context(('ggplot')):
        plt.rc('text', usetex = True)
        plt.rc('font', family = 'serif')

        x = sy.symbols('x')
        p = sy.plot(
          (-((-x) + 1), (x, -0, -1)),
          (-(-(-x) + 3), (x, -1, -4)),
          (-(0.5*(-x) - 3), (x, -4, -6)),
          xlim = (-9,3),
          ylim = (-4,4),
          xlabel = '$x$',
          ylabel = '$y$',
        )
      ```
- id: 1542516047269
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 07: The graph of $y=\sqrt{3x-x^2}$ is given:
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def f(x):
        return sy.sqrt(3*x - x**2)

      x = sy.symbols('x')
      p = sy.plot(
        f(x),
        xlim = (-1,6),
        ylim = (-1,3),
        xlabel = '$x$',
        ylabel = '$y$',
      )
      ```
      Use transformations to create a function whose graph is as shown:
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      def f(x):
        return sy.sqrt(3*x - x**2)

      x = sy.symbols('x')
      p = sy.plot(
        -f(x+4) - 1,
        xlim = (-6,1),
        ylim = (-3,1),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )
      p[0].line_color = '#E18276'
      p.show()
      ```
    Back: |
      $$
      y = -\sqrt{-x^2 - 5x - 4} - 1
      $$
- id: 1542517339370
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 09: Graph the function $y=-x^3$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        -x**3,
        xlim = (-6,6),
        ylim = (-4,4),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(0.5, 1.0, '$y = -x^3$')

      p._backend.show()
      ```
- id: 1542517339497
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 11: Graph the function $y=(x+1)^2$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        (x+1)**2,
        xlim = (-4,2),
        ylim = (-1,3),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(0.5, 1.0, '$y = (x+1)^2$')

      p._backend.show()
      ```
- id: 1542517339594
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 13: Graph the function $y=1+2\cos{x}$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        1 + 2*sy.cos(x),
        xlim = (-6,6),
        ylim = (-3,5),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(2.0, 1.0, '$y = 1 + 2\cos{x}$')
      ax.text(sy.pi-0.1, -0.5, '$\pi$')
      ax.text(-sy.pi-0.4, -0.5, '$-\pi$')

      p._backend.show()
      ```
- id: 1542517339693
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 15: Graph the function $y=\sin{x/2}$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        sy.sin(x/2),
        xlim = (-2*math.pi, 2*math.pi),
        ylim = (-4,4),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(2.0, 1.5, '$y = \sin{x/2}$')
      ax.text(2*sy.pi-0.1, -0.5, '$2\pi$')

      p._backend.show()
      ```
- id: 1542517339793
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 17: Graph the function $y=\sqrt{x+3}$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        sy.sqrt(x + 3),
        xlim = (-3, 3),
        ylim = (-1, 3),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(2.0, 1.5, '$y = \sqrt{x + 3}$')

      p._backend.show()
      ```
- id: 1542517339929
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 19: Graph the function $y=\frac{1}{2}(x^2+8x)$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        (x**2 + 8*x)/2,
        xlim = (-12, 12),
        ylim = (-9, 7),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(2.0, 1.5, '$y = \\frac{1}{2}(x^2 + 8x)$')

      p._backend.show()
      ```
- id: 1542517340044
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 21: Graph the function $y=|x-2|$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        (-(x - 2), (x, -1, 2)),
        ((x - 2), (x, 2, 5)),
        xlim = (-1, 5),
        ylim = (-1, 3),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(2.0, 1.5, '$y = |x - 2|$')

      p._backend.show()
      ```
- id: 1542517340153
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 23: Graph the function $y=|\sqrt{x}-1|$ by hand, not by plotting points, but by starting with the graph of one of the standard functions given in section 1.2 of CCAC, and then applying appropriate transformations.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        (-(sy.sqrt(x) - 1), (x, 0, 1)),
        ((sy.sqrt(x) - 1), (x, 1, 5)),
        xlim = (-1, 4.5),
        ylim = (-1, 2),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(1.0, 1.0, '$y = |\\sqrt{x} - 1|$')

      p._backend.show()
      ```
- id: 1542517340268
  fields:
    Front: |
      CCAC 01.3 27a: How is the graph of $y=f(|x|)$ related to the graph of $f$?
    Back: |
      The portion of the graph of $y = f(x)$ to the right of the $y$-axis is reflected about the $y$-axis.
- id: 1542517737494
  useMarkdown: pweave
  fields:
    Front: |
      CCAC 01.3 27b: Sketch the graph of $y=\sin{|x|}$.
    Back: |
      ```{python echo = False}
      import sympy as sy
      import matplotlib.pyplot as plt
      import numpy as np
      import math

      plt.rc('text', usetex = True)
      plt.rc('font', family = 'serif')

      x = sy.symbols('x')
      p = sy.plot(
        (sy.sin(-x), (x, -8, 0)),
        (sy.sin(x), (x, 0, 8)),
        xlim = (-7.5, 7.5),
        ylim = (-5, 5),
        xlabel = '$x$',
        ylabel = '$y$',
        show = False,
      )

      if hasattr(p, '_backend'):
        p._backend.close()
      p._backend = p.backend(p)
      fg, ax = p._backend.fig, p._backend.ax

      ax.text(1.5, 1.5, '$y = \\sin{|x|}$')

      p._backend.show()
      ```
